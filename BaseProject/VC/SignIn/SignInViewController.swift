//
//  SignInViewController.swift
//  ChatRealtime
//
//  Created Dang Hung on 10/29/18.
//  Copyright © 2018 Dang Hung. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import YogaKit
import Localize_Swift

class SignInViewController: UIViewController, SignInViewProtocol {

	var presenter: SignInPresenterProtocol?
    var nav:NavView!
    //MARK: UIViewController lifecycle
    
    var androidSwitchSmall : MJMaterialSwitch!
    let kSmallSwitch = 1
    let kMediumSwitch = 2
    let kLargeSwitch = 3

    
    override func viewDidLoad() {
        super.viewDidLoad()
        NotificationCenter.default.addObserver(self, selector: #selector(language), name: NSNotification.Name(LCLLanguageChangeNotification), object: nil)
        
        NetworkManager.shared.login(username: "hungnd", password: "123456") {
            print("")
        }
        addSwitchView()
    }
    
    func addSwitchView(){
        self.androidSwitchSmall = MJMaterialSwitch(withSize: .small, style: MJMaterialSwitchStyle.light, state: MJMaterialSwitchState.on)
        self.androidSwitchSmall.tag = kSmallSwitch
        self.androidSwitchSmall.addTarget(self, action: #selector(switchStateChanged(_:)), for: UIControl.Event.valueChanged)
        self.view.addSubview(self.androidSwitchSmall)
        
        let androidSwitchMedium = MJMaterialSwitch(withSize: .normal, style: MJMaterialSwitchStyle.medium, state: MJMaterialSwitchState.on)
        androidSwitchMedium.isBounceEnabled = false
        androidSwitchMedium.isRippleEnabled = true
        androidSwitchMedium.tag = kMediumSwitch
        androidSwitchMedium.addTarget(self, action: #selector(switchStateChanged(_:)), for: UIControl.Event.valueChanged)
        self.view.addSubview(androidSwitchMedium)
        
        let androidSwitchLarge = MJMaterialSwitch(withSize: .big, style: MJMaterialSwitchStyle.dark, state: MJMaterialSwitchState.on)
        androidSwitchLarge.tag = kLargeSwitch
        androidSwitchLarge.addTarget(self, action: #selector(switchStateChanged(_:)), for: UIControl.Event.valueChanged)
        self.view.addSubview(androidSwitchLarge)
        
        self.androidSwitchSmall.center = self.view.center
        self.androidSwitchSmall.center.y = self.view.center.y - 50
        
        androidSwitchMedium.center = self.view.center
        
        androidSwitchLarge.center = self.view.center
        androidSwitchLarge.center.y = self.view.center.y + 50
    }
    
    @objc func switchStateChanged(_ mjSwitch: MJMaterialSwitch) {
        
        if mjSwitch.tag == kSmallSwitch {
            print(mjSwitch.isOn, mjSwitch.tag, "Small")
            
        } else if mjSwitch.tag == kMediumSwitch {
            
            print(mjSwitch.isOn, mjSwitch.tag, "Medium")
            
        } else if mjSwitch.tag == kLargeSwitch {
            print(mjSwitch.isOn, mjSwitch.tag, "Large")
            
        }
    }
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        setupUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.setNavigationBarHidden(false, animated: false)
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
    }
    
    func setupUI(){
        self.view.configureLayout{ (layout) in
            layout.isEnabled = true
            layout.width = YGValue(self.view.bounds.size.width)
            layout.height = YGValue(self.view.bounds.size.height)
        }
        
        let navRect = CGRect(x: 0, y: 0, width:Config.widthS, height:44 + Helper.topPadding)
        nav = NavView(frame:navRect)
        self.view.addSubview(nav)
        
        
        nav.btnBack.addTargetClosure {[weak self] (button)  in
            self?.navigationController?.popViewController(animated: true)
        }
        self.view.yoga.applyLayout(preservingOrigin: true)
        
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        self.view.configureLayout{ (layout) in
            layout.width = YGValue(size.width)
            layout.height = YGValue(size.height)
        }
        self.view.yoga.applyLayout(preservingOrigin: true)
    }
    
    @objc func language(){
        nav.language()
    }
    
    @IBAction func didTouchButtonBack(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    

}
